const transactions = require('./transactions.json');

/**
  * Класс для анализа транзакций
  */
class TransactionAnalyzer {
    /**
     * Создает экземпляр TransactionAnalyzer
     * @param {Array} transactions массив транзакций для анализа 
     */
 constructor(transactions) {
    this.transactions = transactions;
 }

 /**
  * Возвращает уникальные типы транзакций
  * @returns {Array} массив уникальных типов транзакций
  */
getUniqueTransactionType() {
    const uniqueType = new Set();
    this.transactions.forEach((transaction) => {
        uniqueType.add(transaction.transaction_typr);
    });
    return [...uniqueType];
    }
}

/**
 * Вычисляет общую сумму транзакций
 * @returns {number} общая суммма транзакций
 */
calculateTotalAmount() 
    return this.transactions.reduce((totalAmount, transaction) => {
        return totalAmount + transaction.transaction_amount;
    }, 0);

/**
 * Вычисляет общую сумму транзакций по дате
 * @param {number} year (год)
 * @param {number} month (месяц)
 * @param {number} day (день)
 * @returns {number} общая сумма транзакций по уникальнной дате
 */
calculateTotalAmountByDate(year, month, day) 
    let filtered = this.transactions;
    if (year) {
        filtered = filtered.filter(transaction => {
            const transactionYear = Number(transaction.transaction_date.split('-')[0]);
            return transactionYear === year;
        });
    }
    if (month) {
        filtered = filtered.filter(transaction => {
            const transactionMonth = Number(transaction.transaction_date.split('-')[1]);
            return transactionMonth === month; 
    });
}
    if (day) {
        filtered = filtered.filter(transaction => {
            const transactionDay = Number(transaction.transaction_date.split('-')[2]);
            return transactionDay === day; 
    });
}

const totalAmount = filtered.reduce((acc, transaction) => {
    return acc + parseFloat(transaction.transaction_amount);
}, 0);
return totalAmount;
/**
 * Возвращает транзакции по уникальному типу
 * @param {string} тип транзакций
 * @returns {Array} массив транзакций уникального типа
 */
getTransactionByType(type) 
    return this.transactions.filter((item) => {
        return item.transaction_type === type;
    });

/**
 * Возвращает транзакции в заданном диапозоне дат
 * @param {string} изначальная дата
 * @param {string} конечная дата
 * @returns {Array} массив транзакций в заданном диапозоне дат
 */
getTransactionsInDateRange(startDate, endDate) 
    return this.transactions.filter((item) => {
        return item.transaction_date >= startDate && item.transaction_date <= endDate;
    });

/**
 * Возвращает транзакции по указанному имени торговца
 * @param {string} имя торговца
 * @returns {Array} массив транзакций указанного торговца
 */
getTransactionsByMerchant(merchantName) 
    return this.transactions.filter((item) => {
        return item.merchant_name === merchantName;
    });

/**
 * Вычисляет среднюю сумму транзакций
 * @returns {number} средняя сумма транзакции
 */
calculateAverageTransactionAmount() 
    return this.transactions.reduce((totalAmount, transaction) => {
        return totalAmount + parseFloat(transaction.transaction_amount);
    }, 0) / this.transactions.length;

/**
 * Возвращает транзакции в задданом диапозоне сумм
 * @param {number} минимальная сумма
 * @param {number} максимальная сумма
 * @returns {Array} массив транзакций в заданном диапозоне сумм
 */
getTransactionsByAmountRange(minAmount, maxAmount) 
    return this.transactions.filter((element) => {
        return element.transaction_amount >= minAmount && element.transaction_amount <= maxAmount;
    });

/**
 * Вычисляет общую сумму дебитовых транзакций
 * @returns {number} общая сумма дебитовых транзакций
 */
calculateTotalDebitAmount() 
    return this.transactions.filter((item) => {
         return item.transaction_type === "debit";
     }).reduce((acc, item) => {
          return acc + parseFloat(item.transaction_amount);
    }, 0);
/**
 * Находит месяц с наибольшим количеством транзакций
 * @returns {string} месяц с наибольшим количеством транзакций
 */
findMostTransactionsMonth() 
    let mostTransactionsMonth = null;
    let maxTr = 0;

    const transactionsByMonth = this.transactions.reduce((acc, item) => {
        const month = entry.transaction_date.split('-')[1];
        acc[month] = (acc[month] || 0) + 1;
        if (acc[month] > maxTr) {
            maxTr = acc[month];
            mostTransactionsMonth = month;
        }
        return acc;
    }, {});

    return mostTransactionsMonth;

/**
 * Находит месяц с наибольшим количеством транзакций
 * @returns {string} месяц с наибольшим количеством дебитовых транзакций
 */
findMostDebitTransactionMonth() 
   let DebitMonth = null;
   let maxDebitTr = 0;

   for (const month in this.transactions.reduce((acc, transaction) => {
       if (transaction.transaction_type === 'debit') {
           const month = transaction.transaction_date.split('-')[1];
         acc[month] = (acc[month] || 0) + 1;
         if (acc[month] > maxDebitTr) {
             maxDebitTr = acc[month];
              DebitMonth = month;
            }
        }
      return acc;
    }, {}));

    return DebitMonth;
    
/**
 * Определяет тип транзакций, которых больше: кредитных или дебитовых
 * @returns {string} тип транзакций, которых больше: "credit", "debit" или "equal"
 */
mostTransactionTypes()
    const debitAmount = this.transactions.filter((item) => {
        return item.transaction_type === "debit";
    }).lenght;
    const creditAmount = this.transactions.filter((item) => {
        return item.transaction_type === "credit";
    }).lenght;

    if (debitAmount < creditAmount) {
        return "credit";
    }
    else if (debitAmount > creditAmount) {
        return "debit";
    }
    else {
        return "equal";
    }

/**
 * Возвращает ранзакции до указанной даты
 * @param {string} дата
 * @returns {Array} массив транзакций до указаной даты
 */
getTransactionsBeforeDate(date) 
    return this.transactions.filter((item) => {
         return item.transaction_date < date;
    });
    
/**
 * Находит транзакции по идентификатору
 * @param {string} идентификатор транзакций 
 * @returns {Objectnull} найдення транзакция или null, если не найдено
 */
findTransactionById(id) 
    return this.transactions.find((item) => {
        return item.transaction_id === id;
    });
    
/**
 * Вовзвращает описания транзакции
 * @returns {Array} массив описаний транзакций
 */
mapTransactionDescriptions() 
    return this.transactions.map((item) => {
        return item.transaction_description;
    });

const transactionAnalyzer = new TransactionAnalyzer(transactions);
console.log(transactionAnalyzer.addTransaction("new transaction to add"));
console.log(transactionAnalyzer.getAllTransactions());
console.log(transactionAnalyzer.getUniqueTransactionType());
console.log(transactionAnalyzer.calculateTotalAmount());
console.log(transactionAnalyzer.calculateTotalAmountByDate(2019, 1, 2));
console.log(transactionAnalyzer.getTransactionByType("debit"));
console.log(transactionAnalyzer.getTransactionsInDateRange("2019-03-01", "2019-04-01"));
console.log(transactionAnalyzer.getTransactionsByMerchant("BurgerJointXYZ"));
console.log(transactionAnalyzer.calculateAverageTransactionAmount());
console.log(transactionAnalyzer.getTransactionsByAmountRange(50, 100));
console.log(transactionAnalyzer.calculateTotalDebitAmount());
console.log(transactionAnalyzer.findMostTransactionsMonth());
console.log(transactionAnalyzer.findMostDebitTransactionMonth());
console.log(transactionAnalyzer.mostTransactionTypes());
console.log(transactionAnalyzer.getTransactionsBeforeDate("2019-03-10"));
console.log(transactionAnalyzer.findTransactionById("112"));
console.log(transactionAnalyzer.mapTransactionDescriptions());
